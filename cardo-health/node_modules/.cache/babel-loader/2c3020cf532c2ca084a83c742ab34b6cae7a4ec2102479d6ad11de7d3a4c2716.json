{"ast":null,"code":"import axios from 'axios';\nimport { getToken } from './token';\nexport const authAPI = async function (path) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let credentials = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const authToken = getToken();\n  const aixosOptions = {\n    method: 'POST',\n    url: 'http://localhost:3001/' + path,\n    headers: {},\n    withCredentials: credentials,\n    data: data\n  };\n  const options = {\n    method: 'POST',\n    // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors',\n    // no-cors, *cors, same-origin\n    cache: 'no-cache',\n    // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'same-origin',\n    // include, *same-origin, omit\n    headers: {\n      'Content-Type': 'application/json'\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n\n    redirect: 'follow',\n    // manual, *follow, error\n    referrerPolicy: 'no-referrer',\n    // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  };\n\n  console.log(options);\n  if (authToken) options.headers['Authorization'] = authToken;\n\n  //return axios(aixosOptions).then(res => res.data);\n\n  return await fetch(url, {\n    method: 'POST',\n    // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors',\n    // no-cors, *cors, same-origin\n    cache: 'no-cache',\n    // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'same-origin',\n    // include, *same-origin, omit\n    headers: {\n      'Content-Type': 'application/json'\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n\n    redirect: 'follow',\n    // manual, *follow, error\n    referrerPolicy: 'no-referrer',\n    // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  });\n\n  return response.json(); // parses JSON response into native JavaScript objects\n};","map":{"version":3,"names":["axios","getToken","authAPI","path","data","credentials","authToken","aixosOptions","method","url","headers","withCredentials","options","mode","cache","redirect","referrerPolicy","body","JSON","stringify","console","log","fetch","response","json"],"sources":["/Users/rafaelguerreroclemente/Documents/interviews/cardo-health/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\nimport { getToken } from './token';\n\nexport const authAPI = async (path, data = {}, credentials = true) => {\n    const authToken = getToken();\n\n    const aixosOptions = {\n        method: 'POST',\n        url: 'http://localhost:3001/' + path,\n        headers: {},\n        withCredentials: credentials,\n        data: data\n    };\n\n    const options = {\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: 'same-origin', // include, *same-origin, omit\n        headers: {\n          'Content-Type': 'application/json'\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        redirect: 'follow', // manual, *follow, error\n        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    };\n\n    console.log(options)\n\n    if(authToken) options.headers['Authorization'] = authToken;\n\n    //return axios(aixosOptions).then(res => res.data);\n\n    return await fetch(url, {\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: 'same-origin', // include, *same-origin, omit\n        headers: {\n          'Content-Type': 'application/json'\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        redirect: 'follow', // manual, *follow, error\n        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n      });\n      return response.json(); // parses JSON response into native JavaScript objects\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,SAAS;AAElC,OAAO,MAAMC,OAAO,GAAG,gBAAOC,IAAI,EAAoC;EAAA,IAAlCC,IAAI,uEAAG,CAAC,CAAC;EAAA,IAAEC,WAAW,uEAAG,IAAI;EAC7D,MAAMC,SAAS,GAAGL,QAAQ,EAAE;EAE5B,MAAMM,YAAY,GAAG;IACjBC,MAAM,EAAE,MAAM;IACdC,GAAG,EAAE,wBAAwB,GAAGN,IAAI;IACpCO,OAAO,EAAE,CAAC,CAAC;IACXC,eAAe,EAAEN,WAAW;IAC5BD,IAAI,EAAEA;EACV,CAAC;EAED,MAAMQ,OAAO,GAAG;IACZJ,MAAM,EAAE,MAAM;IAAE;IAChBK,IAAI,EAAE,MAAM;IAAE;IACdC,KAAK,EAAE,UAAU;IAAE;IACnBT,WAAW,EAAE,aAAa;IAAE;IAC5BK,OAAO,EAAE;MACP,cAAc,EAAE;MAChB;IACF,CAAC;;IACDK,QAAQ,EAAE,QAAQ;IAAE;IACpBC,cAAc,EAAE,aAAa;IAAE;IAC/BC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACf,IAAI,CAAC,CAAC;EAC/B,CAAC;;EAEDgB,OAAO,CAACC,GAAG,CAACT,OAAO,CAAC;EAEpB,IAAGN,SAAS,EAAEM,OAAO,CAACF,OAAO,CAAC,eAAe,CAAC,GAAGJ,SAAS;;EAE1D;;EAEA,OAAO,MAAMgB,KAAK,CAACb,GAAG,EAAE;IACpBD,MAAM,EAAE,MAAM;IAAE;IAChBK,IAAI,EAAE,MAAM;IAAE;IACdC,KAAK,EAAE,UAAU;IAAE;IACnBT,WAAW,EAAE,aAAa;IAAE;IAC5BK,OAAO,EAAE;MACP,cAAc,EAAE;MAChB;IACF,CAAC;;IACDK,QAAQ,EAAE,QAAQ;IAAE;IACpBC,cAAc,EAAE,aAAa;IAAE;IAC/BC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACf,IAAI,CAAC,CAAC;EAC7B,CAAC,CAAC;;EACF,OAAOmB,QAAQ,CAACC,IAAI,EAAE,CAAC,CAAC;AAC9B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}